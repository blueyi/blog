<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>blueyi&#39;s notes</title>
    <link>http://notes.maxwi.com/</link>
    
    <image>
      <url>http://notes.maxwi.com/icon.png</url>
      <title>blueyi&#39;s notes</title>
      <link>http://notes.maxwi.com/</link>
    </image>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>心怀善意，虛怀若谷！</description>
    <pubDate>Thu, 21 Dec 2017 08:31:54 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Docker run命令参数</title>
      <link>http://notes.maxwi.com/2017/12/21/docker-run/</link>
      <guid>http://notes.maxwi.com/2017/12/21/docker-run/</guid>
      <pubDate>Thu, 21 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;应该是我们日常使用docker中最常用，也最重要的命令。&lt;br&gt;命令格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run [OPTIONS] IMAGE [COMMAND] [ARG...]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/21/docker-run/#disqus_thread</comments>
    </item>
    
    <item>
      <title>python pip源配置</title>
      <link>http://notes.maxwi.com/2017/12/19/python-pip-conf/</link>
      <guid>http://notes.maxwi.com/2017/12/19/python-pip-conf/</guid>
      <pubDate>Tue, 19 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;由于种种原因我们可能无法正常连接到python的官方pip源，或者连接速度很慢，或者由于根证书的原因在安装包时会提示连接证书问题，可以通过修改pip的配置来修改为国内其他源，并信任相应的源，避免证书错误，提高包安装速度。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/19/python-pip-conf/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Dockerfile的编写</title>
      <link>http://notes.maxwi.com/2017/12/14/docker-Dockerfile/</link>
      <guid>http://notes.maxwi.com/2017/12/14/docker-Dockerfile/</guid>
      <pubDate>Thu, 14 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;记录Dockerfile的编写规则和用法&lt;/p&gt;
&lt;p&gt;Dockerfile就是用于构建image的一系列命令和参数构成的脚本，通过&lt;code&gt;docker build -t &amp;lt;image_name:tag&amp;gt; -f &amp;lt;/path/to/Dockerfile&amp;gt; .&lt;/code&gt;来构建。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt;命令从名为&lt;code&gt;Dockerfile&lt;/code&gt;的文件和&lt;code&gt;context&lt;/code&gt;来构建image，context是&lt;code&gt;PATH&lt;/code&gt;（本地目录）或者&lt;code&gt;URL&lt;/code&gt;（Git repository位置）处的文件。context会以递归方式处理，所以PATH的子目录和git的submodules都会处理，同样这里要小心用于作为PATH的目录最好不要有与镜像无关的文件，通常会新建一个空文件夹做为context的PATH。&lt;/p&gt;
&lt;p&gt;PATH下的&lt;code&gt;.dockerignore&lt;/code&gt;可以用于排除文件和目录。&lt;/p&gt;
&lt;p&gt;构建工作由Docker守护进程运行，而不是docker的CLI，其中&lt;code&gt;-t&lt;/code&gt;参数用于指定镜像的repository和tag，可以有多个&lt;code&gt;-t&lt;/code&gt;，&lt;code&gt;-f&lt;/code&gt;指定&lt;code&gt;Dockerfile&lt;/code&gt;的路径，最后的&lt;code&gt;.&lt;/code&gt;表示上下文件环境为当前目录。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker build -t blueyi/python-3.6:dev -f ~/docker/Dockerfile .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/14/docker-Dockerfile/#disqus_thread</comments>
    </item>
    
    <item>
      <title>手动下载gcc-4.8.5源码在centos6.9上安装多版本GCC</title>
      <link>http://notes.maxwi.com/2017/12/09/gnu-gcc-compile-for-centos6/</link>
      <guid>http://notes.maxwi.com/2017/12/09/gnu-gcc-compile-for-centos6/</guid>
      <pubDate>Sat, 09 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;在一个系统较老的centos（6.9）上编译安装gcc4.8.5，系统源里面带的是4.7.2，对C++11中的特性支持不完整，所以需要手动编译一份新版本。&lt;br&gt;以为会很简单，直接下载源码，根据readme配置相关依赖源码，然而最后还是编译的时候报错，所以记录下来。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/09/gnu-gcc-compile-for-centos6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>GCC在64位系统上编译32位程序遇到的问题</title>
      <link>http://notes.maxwi.com/2017/12/06/compile-x32-executable-at-x64-linux-system/</link>
      <guid>http://notes.maxwi.com/2017/12/06/compile-x32-executable-at-x64-linux-system/</guid>
      <pubDate>Wed, 06 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;默认的GCC编译选项会编译出与系统一致的输出，例如64位直接使用gcc或g++编译出的为64位程序或库，而32位系统编译的是对应32位的。&lt;br&gt;可以通过在编译时添加选项&lt;code&gt;-m32&lt;/code&gt;或&lt;code&gt;-m64&lt;/code&gt;来指定编译生成的相应版本，如果同时带上这2个选项，只有后一个会生效。&lt;br&gt;问题的关键时多数时候会提示缺少库，这里以64位下编译32位程序为例，给出ubuntu和centos下相关依赖包。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/06/compile-x32-executable-at-x64-linux-system/#disqus_thread</comments>
    </item>
    
    <item>
      <title>让普通的VS项目支持编译CUDA代码</title>
      <link>http://notes.maxwi.com/2017/12/06/cuda-compiled-for-normal-project-in-vs/</link>
      <guid>http://notes.maxwi.com/2017/12/06/cuda-compiled-for-normal-project-in-vs/</guid>
      <pubDate>Wed, 06 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;当安装了VS之后再安装CUDA套件就可以通过VS创建基于CUDA的项目，但往往我们会需要让之前的老项目支持对CUDA的编译，以便使用CUDA对原有项目中的部分算法加速，网上有各种各样的尝试，搜索SOF之后找到一个超简单的方法，记录之。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/06/cuda-compiled-for-normal-project-in-vs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker 使用入门</title>
      <link>http://notes.maxwi.com/2017/12/06/docker-useful-command/</link>
      <guid>http://notes.maxwi.com/2017/12/06/docker-useful-command/</guid>
      <pubDate>Wed, 06 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;首先 Docker 是由 go 语言编写，基于 Linux 容器技术（LXC）、Namespace、Cgroup 和 UnionFS（联合文件系统）等技术的轻量级操作系统虚拟化解决方案。&lt;/p&gt;
&lt;p&gt;对于 docker 的概念，可以简单理解如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;镜像（Image）&lt;/strong&gt; 类似于虚拟机的快照，它是只读，可以以镜像为模板创建容器，在容器中的更改不会影响到原镜像。实际镜像是 UnionFS 的层级文件系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器（Container）&lt;/strong&gt; 类似于轻量级的虚拟机，由 docker 镜像实例化而来，docker 推荐一个容器运行一个进程，可见其轻量程度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注册服务器（Registry）&lt;/strong&gt; 提供在线存放 docker 镜像的在线服务，可以理解为 github 所提供的 repository 作用，当我们使用 docker run 运行一个本地不存在的镜像时，默认情况下 docker 会从 docker 官方的 registry 拉取该镜像，然后创建并运行一个容器。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt; 可以理解为用于构建镜像的命令和设置组合&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文将从安装开始，记录docker日常使用的一些命令、问题及深一点的理解&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/06/docker-useful-command/#disqus_thread</comments>
    </item>
    
    <item>
      <title>YUV 数据格式详解</title>
      <link>http://notes.maxwi.com/2017/12/05/yuv/</link>
      <guid>http://notes.maxwi.com/2017/12/05/yuv/</guid>
      <pubDate>Tue, 05 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;YUV-数据格式概览&quot;&gt;&lt;a href=&quot;#YUV-数据格式概览&quot; class=&quot;headerlink&quot; title=&quot;YUV 数据格式概览&quot;&gt;&lt;/a&gt;YUV 数据格式概览&lt;/h2&gt;&lt;p&gt;YUV 的原理是把亮度与色度分离，使用 Y、U、V 分别表示亮度，以及蓝色通道与亮度的差值和红色通道与亮度的差值。其中 Y 信号分量除了表示亮度 (luma) 信号外，还含有较多的绿色通道量，单纯的 Y 分量可以显示出完整的黑白图像。U、V 分量分别表示蓝 (blue)、红 (red) 分量信号，它们只含有色彩 (chrominance/color) 信息，所以 YUV 也称为 YCbCr，C 意思可以理解为 (component 或者 color)。&lt;/p&gt;
&lt;p&gt;维基百科上的 RGB 转 YUV 的公式能更好的反应 YUV 与 RGB 的关系，以及为什么称为 YCbCr：&lt;br&gt;&lt;img data-src=&quot;yuv1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Y 中含有三元色色信息，且有较多的 G，所以他们一起可以显示出全彩的图像。&lt;br&gt;很显然我们可以想到是不是会有 YCgCb、YCgCr 等，针对不同的应用场景，也确实有相关应用研究。&lt;/p&gt;
&lt;p&gt;如下图，一张从上到下分别为原图、Y、U 和 V：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&quot;yuv2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;采用 YUV 而不是使用 RGB，既有历史原因：为了兼容老式黑白电视，因为 YUV 如果只输出 Y 就成了黑白图像了。也有 YUV 自己的其他优点，例如可以根据需要，采用特定的 YUV 存储格式，以降低祼码流的空间占用。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/05/yuv/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows 下的多线程应用</title>
      <link>http://notes.maxwi.com/2017/12/04/windows-multi-threads/</link>
      <guid>http://notes.maxwi.com/2017/12/04/windows-multi-threads/</guid>
      <pubDate>Mon, 04 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;Windows 下的多线程中线程锁是通过&lt;code&gt;CRITICAL_SECTION&lt;/code&gt;实现，用以保护用户数据，即当串行代码断执行到该部分时，操作系统将告知下一来执行到此处的线程等待，直到上一个线程离开被保护的代码断，从而通过将需要访问数据的部分放在该代码段来保护数据被多线程访问时的一致性。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/04/windows-multi-threads/#disqus_thread</comments>
    </item>
    
    <item>
      <title>gdb调试coredump文件</title>
      <link>http://notes.maxwi.com/2017/12/03/coredump/</link>
      <guid>http://notes.maxwi.com/2017/12/03/coredump/</guid>
      <pubDate>Sun, 03 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;生成coredump&quot;&gt;&lt;a href=&quot;#生成coredump&quot; class=&quot;headerlink&quot; title=&quot;生成coredump&quot;&gt;&lt;/a&gt;生成coredump&lt;/h2&gt;&lt;p&gt;当程序运行出现如下错误时：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Program terminated with signal 11, Segmentation fault   (core dumped).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;系统会提示有coredump产生，但通常我们在系统文件夹下并找不到core文件，是因为系统设置产生core文件大小为0，也即不会产生，所以我们这里可以做一些简单的设置：&lt;/p&gt;
&lt;p&gt;设置core文件产生在当前目录，&lt;code&gt;%e&lt;/code&gt;表示产生core文件的程序名，&lt;code&gt;%p&lt;/code&gt;为pid号：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;core.%e.%p&amp;quot;&lt;/span&gt; &amp;gt; /proc/sys/kernel/core_pattern  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;查看当前core文件设置的大小：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;ulimit&lt;/span&gt; -c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;设置core文件大小为无限制：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;ulimit&lt;/span&gt; -c unlimited&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/03/coredump/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Windows和Linux下的动态链接库的编译、链接和引用相关问题</title>
      <link>http://notes.maxwi.com/2017/12/01/dll-lib-export-for-windows/</link>
      <guid>http://notes.maxwi.com/2017/12/01/dll-lib-export-for-windows/</guid>
      <pubDate>Fri, 01 Dec 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;关于动态链接库和静态链接库的区别可以参考另一篇笔记，其实也就一句话：静态链接库在编译期加载到相应的编译目标中（编译后不再需要），而动态链接库是在运行期由执行目标进行调用（每次运行都需要）。&lt;br&gt;Windows下动态链接库以后缀&lt;code&gt;.dll&lt;/code&gt;标识，Linux下的动态链接库命名为&lt;code&gt;libxxx.so&lt;/code&gt;，其中&lt;code&gt;xxx&lt;/code&gt;为库名称。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/12/01/dll-lib-export-for-windows/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google Test(gtest)使用</title>
      <link>http://notes.maxwi.com/2017/11/29/gtest/</link>
      <guid>http://notes.maxwi.com/2017/11/29/gtest/</guid>
      <pubDate>Wed, 29 Nov 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;GTest简介&quot;&gt;&lt;a href=&quot;#GTest简介&quot; class=&quot;headerlink&quot; title=&quot;GTest简介&quot;&gt;&lt;/a&gt;GTest简介&lt;/h2&gt;&lt;p&gt;GTest是Google官方团队开发的开源的C++单元测试框架，地址为：&lt;a href=&quot;https://github.com/google/googletest&quot;&gt;https://github.com/google/googletest&lt;/a&gt;。该地址下同时有一个名为googlemock的项目，Google Mock可以理解为Google Test的辅助测试框架，Google Mock可以用于实现一个模拟类(mock类)，可以用于完成需要接口交互但相应的类又没有实现的测试。本文不涉及Mock，以后有空了再追加Google Mock的使用。&lt;br&gt;使用Google Test可以实现：&lt;br&gt;1、测试应该是独立并且可以重复的。&lt;br&gt;2、测试应该组织良好，能够清晰的反应出测试代码的结构。&lt;br&gt;3、测试应该是可移植和可利用的。&lt;br&gt;4、当测试失败时，Google Test将会提供尽可能多的测试信息，并继续后面的测试而不是结束测试。&lt;br&gt;5、Google Test会跟踪所有用户定义的新测试，而不需要用户一一再去调用它们。从而将测试人员从繁杂的测试用例调用中解放出来，将更多的精力关注中测试本身上。&lt;br&gt;6、测试实现起来很快，因为Google Test框架能够在测试用例之间共用资源，并且它们之前还不会相互依赖。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/11/29/gtest/#disqus_thread</comments>
    </item>
    
    <item>
      <title>tmux简洁教程</title>
      <link>http://notes.maxwi.com/2017/11/10/tmux/</link>
      <guid>http://notes.maxwi.com/2017/11/10/tmux/</guid>
      <pubDate>Fri, 10 Nov 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;tmux主要的功能有两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;终端利用，可以在一个terminal开启多个shell的session，这样就不需要vim一个terminal，命令又要需要一个，其他服务还要再开一个了。&lt;/li&gt;
&lt;li&gt;断线保证任务在后台继续执行，以及当你上线后保证原来打开的多个窗口与断线之前完全一样。以后就不用再使用screen了&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/11/10/tmux/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Makefile极简教程</title>
      <link>http://notes.maxwi.com/2017/11/09/makefile/</link>
      <guid>http://notes.maxwi.com/2017/11/09/makefile/</guid>
      <pubDate>Thu, 09 Nov 2017 08:31:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;关于Makefile的编写和&lt;code&gt;make&lt;/code&gt;命令的简单应用，快速了解Makefile的编写规则，更多功能将在以后的使用中慢慢增加。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/11/09/makefile/#disqus_thread</comments>
    </item>
    
    <item>
      <title>为Linux系统导入根证书</title>
      <link>http://notes.maxwi.com/2017/10/14/certificates-import-linux/</link>
      <guid>http://notes.maxwi.com/2017/10/14/certificates-import-linux/</guid>
      <pubDate>Fri, 13 Oct 2017 23:06:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;公司里面通常都会为了信息安全而要求个人电脑通过公司的根证书访问SSL加密的链接，如果系统里面没有根证书不管是浏览器还是需要访问SSL加密网络的系统命令都会出现证书相关错误。虽然这些证书错误都可以通过其他一些设置绕过去，但还是直接设置一下系统根证书更方便，一劳永逸（自己公司，忽略安全性）。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/10/14/certificates-import-linux/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Docker可用的镜像加速器</title>
      <link>http://notes.maxwi.com/2017/10/14/docker-install-registry-mirrors/</link>
      <guid>http://notes.maxwi.com/2017/10/14/docker-install-registry-mirrors/</guid>
      <pubDate>Fri, 13 Oct 2017 23:06:58 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h3 id=&quot;普通用户无法运行docker命令&quot;&gt;&lt;a href=&quot;#普通用户无法运行docker命令&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/10/14/docker-install-registry-mirrors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Git submodule使用方法</title>
      <link>http://notes.maxwi.com/2017/08/18/git-submodule/</link>
      <guid>http://notes.maxwi.com/2017/08/18/git-submodule/</guid>
      <pubDate>Fri, 18 Aug 2017 09:06:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;git的submodule可以用于在项目中添加子项目，这样就可以让主项目可以引用子项目的同时，子项目又可以进行独立的版本控制管理。当子项目有了更新之后，可以便捷的在主项目中对相应子项目进行更新。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/08/18/git-submodule/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Shell脚本简单入门</title>
      <link>http://notes.maxwi.com/2017/04/23/shell-script/</link>
      <guid>http://notes.maxwi.com/2017/04/23/shell-script/</guid>
      <pubDate>Sun, 23 Apr 2017 11:21:00 GMT</pubDate>
      <description>
      
        &lt;p&gt;Shell脚本简单入门，如果你分不清shell是什么，此文一定不适合你。毕竟只花了十多分钟看的教程，不会涉及细节，细节将在以后的使用中逐渐以示例形式给出。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/04/23/shell-script/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java通过JNI调用C/C++动态链接库之参数传递及结果返回</title>
      <link>http://notes.maxwi.com/2017/04/20/java-jni-cpp-passing-arguments/</link>
      <guid>http://notes.maxwi.com/2017/04/20/java-jni-cpp-passing-arguments/</guid>
      <pubDate>Thu, 20 Apr 2017 12:48:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;接上一篇关于JNI的基本入门&lt;a href=&quot;/2017/04/19/java-jni-cpp-hello/&quot; title=&quot;Java通过JNI调用C&amp;#x2F;C++动态链接库之HelloWorld&quot;&gt;Java通过JNI调用C&amp;#x2F;C++动态链接库之HelloWorld&lt;/a&gt;，简述给JNI函数传递参数，以及通过JNI函数返回值的方式。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/04/20/java-jni-cpp-passing-arguments/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Java通过JNI调用C/C++动态链接库之HelloWorld</title>
      <link>http://notes.maxwi.com/2017/04/19/java-jni-cpp-hello/</link>
      <guid>http://notes.maxwi.com/2017/04/19/java-jni-cpp-hello/</guid>
      <pubDate>Wed, 19 Apr 2017 12:48:42 GMT</pubDate>
      <description>
      
        &lt;p&gt;Java可以通过JNI（Java Native Interface）来调用本地库，从而解决一些需要使用C/C++来提高效率但却需要使用JAVA调用的场景，例如opencv库编写的图像处理函数，需要使用spark等大数据框架来调用。&lt;/p&gt;
      
      </description>
      
      
      <comments>http://notes.maxwi.com/2017/04/19/java-jni-cpp-hello/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
